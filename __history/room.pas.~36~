unit room;

interface

uses System.Generics.Collections,FMX.Dialogs,system.JSON;

type roomPlayer = class
  uid : string;
  name : string;
  cards : Tarray<string>;
end;

type RmInfo = class

  roomId : string;
  playerMap : TDictionary<string,roomPlayer>;
  cardsClickCountMap : TDictionary<string,boolean>;
  holeCards : Tarray<string>;
  MyCards: Tarray<string>;
  choiceCards :TDictionary<string,boolean>;


  constructor Create;
  destructor Destory;

  public
  procedure SetOrUpdatePlayerMap(uid :string ;TJCards :TJsonArray);
  procedure SetHoleCards(roomId :string;HCards : TJsonArray);
  procedure SetCardsClickCountMap(cards : Tarray<string>);
  procedure AddOrRemoveChoiceCardsMap(card : string ; addOrRemove : boolean);
  procedure HideChoiceCards(cards : Tarray<string>);


end;

var RM :RmInfo;

implementation

uses game,common,user,card;

constructor RmInfo.Create;
begin
    playerMap :=  TDictionary<string,roomPlayer>.Create;
    cardsClickCountMap := TDictionary<string,boolean>.Create;
    choiceCards := TDictionary<string,boolean>.Create;
end;

destructor RmInfo.Destory;
begin
   playerMap.DisposeOf;
   cardsClickCountMap.DisposeOf;
   choiceCards.DisposeOf;
   inherited;
end;

procedure RmInfo.SetHoleCards(roomId : string;HCards :TJsonArray);
begin
   rm.roomId := roomId;
   rm.holeCards:=  CM.TJosnArray2TArray(HCards);

end;

procedure RmInfo.SetCardsClickCountMap(cards : Tarray<string>);
var i : integer;
begin
    for i := 0 to High(cards) do
    begin
        cardsClickCountMap.AddOrSetValue(cards[i],true);
    end;
    ChoiceCards.Clear;

end;


procedure RmInfo.SetOrUpdatePlayerMap(uid:string ; TJCards :TJsonArray);
var
  rp :roomPlayer;
begin
   if (UI.GetUserId() = uid )then
   begin
      MyCards:=Cm.TJosnArray2TArray(TJCards);
   end
   else
   begin
      rp:=roomplayer.Create;
      rp.cards:=CM.TJosnArray2TArray(TJCards);
      rp.uid := uid;
      playerMap.AddOrSetValue(uid,rp);
   end;

end;

procedure RmInfo.AddOrRemoveChoiceCardsMap(card :string ; addOrRemove : boolean);
begin
  if addOrRemove then
  begin
    ChoiceCards.TryAdd(card,true);
  end
  else
  begin
    if choiceCards.ContainsKey(card) then
    begin
         choiceCards.Remove(card);
    end;
  end;
end;

procedure RmInfo.HideChoiceCards(cards : Tarray<string>);
var
  i : integer;
begin
  for i := 0 to High(cards) do
  begin
     CI.cardMap[cards[i]].Visible:=false;
  end;

end;

end.
