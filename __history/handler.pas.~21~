unit handler;

interface

uses uDSimpleTcpClient,System.Classes,System.SysUtils,System.Generics.Collections,
FMX.Dialogs,system.JSON;

type  executeFunction= procedure(LStr :TStringStream) of object;

type executeHandler = class
  private

  public
  CallBackDictionary: TDictionary<int16,executeFunction>;
  procedure dealwithLoginSuccess(LStr:TStringStream);
  procedure dealwithErrorAck(LStr:TStringStream);
  procedure dealwithStartGameSuccess(LStr:TStringStream)
  procedure AddCallBackDictionary;
  constructor Create;
  destructor Destroy; override;
end;


var ExHandler :executeHandler;

implementation

uses game;

constructor executeHandler.Create;
begin
   CallBackDictionary:= TDictionary<int16,executeFunction>.Create;
   AddCallBackDictionary();
end;

destructor executeHandler.Destroy;
begin
   CallBackDictionary.DisposeOf;
   inherited;
end;

procedure executeHandler.AddCallBackDictionary();
begin
   CallBackDictionary.Add(2001,dealwithLoginSuccess);  //登陆成功，进入游戏界面
   CallBackDictionary.Add(2002,dealwithErrorAck);   //错误统一处理
    CallBackDictionary.Add(2004,dealwithStartGameSuccess); //开始游戏成功，等待匹配结果
     CallBackDictionary.Add(2004,dealwithErrorAck);
end;


procedure executeHandler.dealwithErrorAck(LStr:TStringStream);
 var
  JS: TJsonObject;
  msg: string;
begin
    JS:=TJsonObject.ParseJSONValue(Lstr.DataString) as TJsonObject;
    JS.TryGetValue('f_msg',msg);
    showMessage(msg);
    JS.DisposeOf;
end;

procedure executeHandler.dealwithLoginSuccess(LStr:TStringStream);
begin
    LFrame.Visible:=false
end;

procedure executeHandler.dealwithStartGameSuccess(LStr:TStringStream);
begin

end;

end.
